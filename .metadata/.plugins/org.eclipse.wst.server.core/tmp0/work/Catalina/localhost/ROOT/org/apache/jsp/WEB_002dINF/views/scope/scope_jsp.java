/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-09-18 08:34:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.scope;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scope_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Servlet/JSP 내장 객체와 범위</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>Servlet/JSP 내장 객체와 범위</h1>\n");
      out.write("\n");
      out.write("    <pre>\n");
      out.write("        Servelt/JSP에는 4종류의 범위를 갖는 내장 객체가 존재\n");
      out.write("        -> 각 종류마다 영향을 끼치는 범위가 다름\n");
      out.write("        -> 개발자가 객체를 별도로 생성하지 않아도 JSP에서 바로 사용할 수 있는 객체 ( 컨테이너가 JSP를 서블릿으로 변환할 때 자동으로 객체가 생성됨 )\n");
      out.write("\n");
      out.write("\n");
      out.write("        1. page (pageContext) : 현재 페이지 (한 페이지)\n");
      out.write("            -> 현재 JSP에서만 사용 가능\n");
      out.write("\n");
      out.write("        2. request : 요청 받은 페이지(Servlet/JSP)와\n");
      out.write("                    이를 위임 받은 페이지(Servlet/JSP)에서 사용 가능\n");
      out.write("                    (최소 2페이지 이상)\n");
      out.write("\n");
      out.write("        3. session : 현재 사이트에 접속한 브라우저당 1개씩 생성\n");
      out.write("                    브라우저가 종료되거나\n");
      out.write("                    session 만료될 때 까지 유효\n");
      out.write("\n");
      out.write("        4. application : 하나의 웹 애플리케이션마다 1개씩 생성되는 객체\n");
      out.write("                    서버 켜질 때 생성되어\n");
      out.write("                    종료될 때 없어짐\n");
      out.write("\n");
      out.write("\n");
      out.write("        *****************************\n");
      out.write("        *** 내장 객체의 우선 순위 ***\n");
      out.write("        *****************************\n");
      out.write("\n");
      out.write("        page > request > session > application\n");
      out.write("\n");
      out.write("\n");
      out.write("        EL로 각 scope에 있는 값을 얻어올 수 있다!\n");
      out.write("\n");
      out.write("        방법 1) ${ 범위이름Scope.속성명 }\n");
      out.write("                    pageScope\n");
      out.write("                    requestScope\n");
      out.write("                    sessionScope\n");
      out.write("                    applicationScope\n");
      out.write("\n");
      out.write("        방법 2) ${ 속성명 }\n");
      out.write("            -> 각 범위에 세팅된 속성 중 \n");
      out.write("                속성명이 일치하는 경우\n");
      out.write("                우선순위가 높은 scope의 속성 값이 얻어와짐\n");
      out.write("                \n");
      out.write("                \n");
      out.write("        ");
      out.write("\n");
      out.write("    </pre>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <ul>\n");
      out.write("        <li>\n");
      out.write("            page scope <br>\n");
      out.write("\n");
      out.write("            ");

                // pageContext : page scope 객체
                pageContext.setAttribute("pageValue", 5);

                pageContext.setAttribute("str", "page 범위에 세팅된 문자열");
            
      out.write("\n");
      out.write("\n");
      out.write("            pageValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write("\n");
      out.write("            <br>\n");
      out.write("            pageValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageScope.pageValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write("\n");
      out.write("        </li>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <li>\n");
      out.write("            request scope <br>\n");
      out.write("            reqValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.reqValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\n");
      out.write("        </li>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <li>\n");
      out.write("            session scope <br>\n");
      out.write("            sessionValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.sessionValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write("\n");
      out.write("        </li>\n");
      out.write("\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <li>\n");
      out.write("            application scope <br>\n");
      out.write("            appValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${applicationScope.appValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write("\n");
      out.write("        </li>\n");
      out.write("        \n");
      out.write("    </ul>\n");
      out.write("\n");
      out.write("    <hr>\n");
      out.write("\n");
      out.write("    <h3>우선 순위 확인</h3>\n");
      out.write("\n");
      out.write("    <h4>각각의 범위에 세팅된 str</h4>\n");
      out.write("    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" <br>\n");
      out.write("    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" <br>\n");
      out.write("    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" <br>\n");
      out.write("    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${applicationScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" <br>\n");
      out.write("\n");
      out.write("    <h4>${str} 확인 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h4>\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("    <hr>\n");
      out.write("\n");
      out.write("    <h3>\n");
      out.write("        <a href=\"scopeCheck\">내장 객체별 생명 주기 확인</a>\n");
      out.write("    </h3>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
